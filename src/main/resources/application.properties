# define server port, whereas 0 chooses a free port randomly when the web server starts.
server.port=8080

# Expose all Actuator endpoints, and explicitly activate env in order to activate /actuator/info
management.endpoints.web.exposure.include=*
management.info.env.enabled=true

# get app details from maven settings, show them via /actuator/info
info.app.artifactid=@project.artifactId@
info.app.name=@project.name@
info.app.version=@project.version@
info.something.something=something

# Write logs to the root directory
logging.file.path=.
logging.file.name=threadhell.log
logging.logback.rollingpolicy.clean-history-on-start=true
logging.logback.rollingpolicy.max-history=0

# H2 db settings
spring.datasource.url=jdbc:h2:mem:threadhelldb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 console settings
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#spring.h2.console.settings.trace=false
#spring.h2.console.settings.web-allow-others=false

# JPA settings
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false

spring.jpa.hibernate.ddl-auto=create
#create ? Hibernate first drops existing tables and then creates new tables.
#update ? The object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no longer required by the application.
#create-drop ? similar to create, with the addition that Hibernate will drop the database after all operations are completed; typically used for unit testing
#validate ? Hibernate only validates whether the tables and columns exist; otherwise, it throws an exception.
#none ? This value effectively turns off the DDL generation, script-based initialization is performed using schema.sql and data.sql directly.

spring.sql.init.mode=always
#always ? always initialize the database
#embedded ? always initialize if an embedded database is in use. This is the default if the property value is not specified.
#never ? never initialize the database

#spring.jpa.defer-datasource-initialization=true
# - executes data.sql and schema.sql after schema generation is done by hibernate
# - schema.sql is read for any additional schema changes and data.sql is executed to initially populate the database

# JobRunr
org.jobrunr.background-job-server.enabled=true
org.jobrunr.background-job-server.worker-count=2
org.jobrunr.dashboard.enabled=true
org.jobrunr.dashboard.port=8000

# ThreadPoolTaskExecutor
spring.task.execution.thread-name-prefix=TaskExecutor-
spring.task.execution.pool.core-size=5
spring.task.execution.pool.max-size=5
#spring.task.execution.pool.queue-capacity=100

# Custom threading parameters
com.example.AsyncThreadHell.total-sub-tasks = 20
com.example.AsyncThreadHell.jobrunr-refresh-seconds = 10
